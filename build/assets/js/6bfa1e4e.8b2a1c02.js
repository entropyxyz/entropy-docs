"use strict";(self.webpackChunkentropy_core=self.webpackChunkentropy_core||[]).push([[451],{6945:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var o=t(4848),r=t(8453);const s={title:"Node encryption and authentication"},c=void 0,i={id:"concepts/node-encryption-and-authentication",title:"Node encryption and authentication",description:"When sending messages to threshold signature servers on the Entropy network, you must authenticate and encrypt the messages.",source:"@site/docs/concepts/node-encryption-and-authentication.md",sourceDirName:"concepts",slug:"/concepts/node-encryption-and-authentication",permalink:"/concepts/node-encryption-and-authentication",draft:!1,unlisted:!1,editUrl:"https://github.com/entropyxyz/entropy-docs/edit/main/docs/concepts/node-encryption-and-authentication.md",tags:[],version:"current",frontMatter:{title:"Node encryption and authentication"},sidebar:"sidebar",previous:{title:"Joining the network",permalink:"/concepts/joining-the-network"},next:{title:"Proactive refresh",permalink:"/concepts/proactive-refresh"}},a={},p=[];function d(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"When sending messages to threshold signature servers on the Entropy network, you must authenticate and encrypt the messages."}),"\n",(0,o.jsx)(n.p,{children:"The authentication process is simple: each node has a substrate account stored on the chain, referred to as a TSS account."}),"\n",(0,o.jsxs)(n.p,{children:["Messages are signed using SR25519. This encryption requires using an X25519 public key which gets used in ",(0,o.jsx)(n.a,{href:"https://www.rfc-editor.org/rfc/rfc9180.html",children:"Hybrid Public Key Encryption"}),", using the ",(0,o.jsx)(n.a,{href:"https://docs.rs/hpke-rs",children:(0,o.jsx)(n.code,{children:"hpke-rs"})})," crate."]}),"\n",(0,o.jsxs)(n.p,{children:["By combining the two, we can generate an ",(0,o.jsx)(n.a,{href:"https://github.com/entropyxyz/entropy-core/blob/master/crates/protocol/src/sign_and_encrypt/mod.rs",children:(0,o.jsx)(n.code,{children:"EncryptedSignedMessage"})}),". JavaScript bindings for creating these are available in the ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@entropyxyz/entropy-protocol-nodejs#Hpke",children:(0,o.jsx)(n.code,{children:"entropy-protocol-nodejs"})})," and ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/@entropyxyz/entropy-protocol-web#Hpke",children:(0,o.jsx)(n.code,{children:"entropy-protocol-web"})})," modules."]}),"\n",(0,o.jsx)(n.p,{children:"The concept is simple:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Whenever you need to authenticate a party, you use a substrate key that is associated with them, whether it's a user submitting an extrinsic or a node with a TSS account."}),"\n",(0,o.jsx)(n.li,{children:"When encrypting a message (only when communicating with nodes), you use their public key to create an encrypted message using HPKE."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);